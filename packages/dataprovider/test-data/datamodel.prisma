generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model UserRole {
  id    String @default(uuid()) @id
  name  String
  users User[] @relation(references: [id])
}

model UserSocialMedia {
  id        String @default(uuid()) @id
  instagram String
  twitter   String
  user      User   @relation(fields: [userId], references: [id])
  userId    String
}

model BlogPost {
  id       String            @default(uuid()) @id
  title    String
  text     String
  author   User?             @relation(fields: [authorId], references: [id])
  authorId String?
  comments BlogPostComment[]
}

model BlogPostComment {
  id       String    @default(uuid()) @id
  text     String
  post     BlogPost? @relation(fields: [postId], references: [id])
  postId   String?
  author   User?     @relation(fields: [authorId], references: [id])
  authorId String?
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id              String            @default(uuid()) @id
  email           String            @unique
  roles           UserRole[]        @relation(references: [id])
  firstName       String?
  lastName        String?
  gender          Gender?
  yearOfBirth     Int?
  wantsNewsletter Boolean
  interests       Topic[]
  userSocialMedia UserSocialMedia?
  address         Json?
  blogPosts       BlogPost[]
  comments        BlogPostComment[]
}

model FilteringTest {
  id              Int   @id @default(autoincrement())
  intField        Int
  floatField      Float
  stringField     String
  dateTimeField   DateTime
  boolField       Boolean
  intField_lt     String
  intField_bt     Int
  snake_field     Int
  snake_field_bt  Int
}

model SomePublicRecordWithIntId {
  id    Int    @default(autoincrement()) @id
  title String
}

enum Topic {
  TOPIC_ONE
  TOPIC_TWO
  TOPIC_THREE
}
